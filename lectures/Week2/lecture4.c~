#include <stdio.h>
#include <stdlib.h>

typedef struct node {
  int value;
  struct node* next;
} LinkedList;


LinkedList* llCreate() {
  return NULL; //null is actually defined to be memory address 0
}


void llAdd(LinkedList* l, int item) {

  //LinkedList newNode; //this creates on runtime stack - need to malloc
  LinkedList* newNode = (LinkedList*)malloc(1 * sizeof(LinkedList));
  newNode->value = item;
  newNode->next = NULL;


  //walk through list
  LinkedList* p = 1; //temp pointer (makes 2 things pointing at first node, so when p is pointing to next index in list we still have a pointer to original first location in list)
  while ( (*p).next != NULL ) { //*p dereferences - "changes" to node type instead
  p = p->next; //this means find the pointer, and follow it down to the data its pointing to - can only be used with structures

}

p->next = newNode;

}


int main() {
  //linkedList create function
  LinkedList* l = llCreate(); //makes new LL and hands it back after call //l will really be a pointer to head of linkedList

  //addNodemethod
  llAdd(l, 2); //parameter is second, l is reference to linkedList
}


//linked List implementation from class


#include <stdio.h>
#include <stdlib.h> // malloc
typedef struct node {
  int value;
  struct node* next;
} LinkedList;
LinkedList* llCreate();
int llIsEmpty(LinkedList* ll);
void llDisplay(LinkedList* ll);
void llAdd(LinkedList** ll, int newValue);
void llFree(LinkedList* ll);
LinkedList* llCreate() {
  return NULL;
}
int llIsEmpty(LinkedList* ll) {
  return (ll == NULL);
}
void llDisplay(LinkedList* ll) {
  LinkedList* p = ll;
  printf("[");
  while (p != NULL) {
    printf("%d, ", (*p).value);
    p = p->next;
  }
  printf("]\n");
}
void llAdd(LinkedList** ll, int newValue) {
  // Create the new node
  LinkedList* newNode = (LinkedList*)malloc(1 * sizeof(LinkedList));
  newNode->value = newValue;
  newNode->next = NULL;
  // Find the end of the list
  LinkedList* p = *ll;
  if (p == NULL) {  // Add first element
    *  ll = newNode;  // This is why we need ll to be a **
  } else {
    while (p->next != NULL) {
      p = p->next;
    }
    // Attach it to the end
    p->next = newNode;
  }
}
void llFree(LinkedList* ll) {
  LinkedList* p = ll;
  while (p != NULL) {
    LinkedList* oldP = p;
    p = p->next;
    free(oldP);
  }
}
int main() {
  LinkedList* l = llCreate();
  llDisplay(l);
  llAdd(&l, 1);
  llDisplay(l);
  llAdd(&l, 2);
  llDisplay(l);
  llAdd(&l, 3);
  llDisplay(l);
  llAdd(&l, 4);
  llDisplay(l);
  llFree(l);
}
