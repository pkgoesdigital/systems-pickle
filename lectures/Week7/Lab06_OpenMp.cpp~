#include <thread>
#include <iostream>
#include <omp.h>
#include <mutex>

//declarations
int isPrime(int num);
int numPrimesInRange(int start, int stop);
void func(int threadID, int start, int stop, int* results);
int blocking(int start, int stop);
int striping(int start, int stop);


int main() {

  omp_set_num_threads(5);

  blocking(10, 100);
  blocking(1000,1000000);
  
  striping(10, 100);
  striping(1000, 1000000);


}

int blocking(int start, int stop) {

  //checking how many threads are running
  double numThreads = omp_get_num_threads();
  int result = 0;

#pragma omp parallel

  //timing stuff
  double startTime = omp_get_qtime();
  printf("Striping\n");
  #pragma omp for schedule(static, ((stop - start)/numThreads)) reduction(+:result)
  for(int i = 0; i < numThreads; i++) {
    int threadStart = (((stop - start) / numThreads)*i)+start;
    int threadStop = ((stop - start)/numThreads)*(i+1)+start;
    result = numPrimesInRange(threadStart, threadStop);
  }
  double endTime = omp_get_qtime();
  double returnTime = startTime - endTime;
  printf("time for %d : %d with %d found\n", i, returnTime, result);

  return result;
}



int striping(int start, int stop) {
  
  //check how many threads are going
  double numThreads = omp_get_num_threads();
  int result = 0;

#pragma omp parallel

  //timing stuff
  double startTime = omp_get_qtime();
  printf("Blocking\n");
#pragma omp for schedule(static, 1) reduction(+:result)
  for(int i = start; i <= stop; i++) {
    if(isPrime(i)) {
      result += 1;
    }
    double endTime = omp_get_gtime();
    double returnTime = startTime - endTime;
    printf("time for %d : %d with %d found\n", i, returnTime, result);
  }
  return result;

}



void func(int threadID, int start, int stop, int* results) {
  printf("I'm ThreadID %i, with Range [%i, %i]\n", threadID, start, stop);
  results[threadID] = numPrimesInRange(start, stop);
  //printf("I'm ThreadID %i, with Range [%i, %i]\n", threadID, start, stop);
}


//calculate numPrimes based on range passed in
int numPrimesInRange(int start, int stop) {
  int numPrimes = 0;
  if(start > stop) {
    printf("%i cannot be greater than stop - redefine range", start);
    return start;
  }

  int i = start;
  while(i <= stop) {
    if(isPrime(i) == true) {
      ++numPrimes;
      ++i;
    }
    else {
      isPrime(i);
      ++i;
    }
  }
  return numPrimes;
}


//determines whether param is a prime number
int isPrime(int num) {
  int i = 2;
  int flag = 1;

  while((i < num) && flag) {
    //condition for non-prime
    if(num % i == 0) {
      flag = 0;
    }
    ++i;
  }
  if(flag) {
    return 1;
  }
  //stop early if not prime (return)
  return 0;
}
