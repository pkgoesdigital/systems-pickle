//Paula Klimas

#include <stdio.h>

void displayScores(int* numArray);
void readScores(int* numCount, int numArray);
void displayHistogram(int* numArray);
void sortHistogram(int* numArray);

struct freq {
  int freq;
  int num;
};


int main() {

  int numCount;
  int numArray[100]; //creates an array with memory pointer                                                  
  
  readScores(&numCount, numArray); //fill array with readScores function                           
  
for(int i = 0; i < numCount; ++i) {
    printf("%d ", numArray[i]);
  }

  int num;
  struct freq histogram[numCount];

  calcHistogram(histogram, numCount, numArray, &num);

  //TODO call to displayScores
  displayScores(numCount, numArray);
 
  //TODO call to displayHistogram
  displayHistogram(histogram, sizeOfHist);

  //TODO call sortHistogram
  //TODO call displayHistogram again to see sorted results


}

void readScores (int* numCount, int* numArray) {

  int numArray[100];
  int i = 0; //# read in
  int k = 0;
  //fill until we hit the end of the file

  while(scanf("%d", &k) != EOF) {
    numArray[i] = k;
    ++i;
  }
  *numCount = i; //changing the value of numCount to i
}

void displayScores(numCount, int* numArray){

  for(int i = 0; i < numCount; ++i) {
    printf("score %d: %d\n", i, numArray[i]);
}
}


void calcHistogram (struct freq* histogram, int numCount, int* numArray, int* sizeOfHist){
  
  int loneScores = 0;

  int loopCount = 0;
  int foundIt = 0;

  for(int i = 0; i < numCount; ++i) {
    while(loopCount < sizeOfHist && !foundIt) {
      if(histogram[loopCount].num == numArray[i]) {
	histogram[loopCount].freq++;
	foundIt = 1;
      } else {
	++loopCount;
      }
    }
    if(loopCount == sizeOfHist){
      histogram[loopCount].num = numArray[i];
      histogram[loopCount].freq = 1; 
	++loneScores;
    }
  }
}

void displayHistogram(struct freq* histogram,  int sizeOfHist) {  

  for(int i = 0; i < sizeOfHist; ++i) {
    printf("value %d: freq %d\n", histogram[i].num, histogram[i].freq);
}
}


//should modify the histogram array it is given to be in order by frequency
void sortHistogram(struct freq* histogram, int sizeOfHist) {
  int count = 0;
  for(int i = 0; i < sizeOfHist; ++i) {
    
  }

}
